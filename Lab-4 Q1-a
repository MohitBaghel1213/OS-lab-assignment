#include <stdio.h> 
#include <stdlib.h>    
#include <pthread.h>
#include <limits.h>


/*Q1- Write a multithreaded program that generates the Fibonacci series.
This program should work as follows:
The user will enter on the command line the number of Fibonacci numbers that the program is to generate.
The program will then create a separate thread that will generate the Fibonacci numbers.
When the thread finishes execution, the parent thread will output the sequence generated by the child thread.
Because the parent thread cannot begin outputting the Fibonacci sequence until the child thread finishes,
this will require having the parent thread wait for the child thread to finish. */

struct fibonacci{
    int n;
    int arr[100000];
};

void* myThread(void *a){
	
	printf("Calculation in thread\n");
	 struct fibonacci *num = ((struct fibonacci *) a);

	
	if(num->n==1)
	{
	    num->arr[0]=0;
	}
	if(num->n==2)
	{
	    num->arr[0]=0;
	    num->arr[1]=1;
	}
	else{
	   num->arr[0]=0;
	   num->arr[1]=1;  
	   int i;
	for ( i=2; i<num->n; i++){
		num->arr[i]=num->arr[i-1]+num->arr[i-2];
	  }
	}
}


int main()
{
    struct fibonacci num;
    scanf("%d" , &num.n);
    
    
    pthread_t thread;
    printf("Before thread\n");
    pthread_create(&thread, NULL, myThread, &num);
    pthread_join(thread, NULL); 
    printf("After thread\n");
    for(int i =0;i<num.n;i++)
    {
        printf("%d ", num.arr[i]);
    }
    printf("\n");
    return 0;
}
